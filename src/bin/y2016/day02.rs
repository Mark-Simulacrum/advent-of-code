use std::cmp;

#[derive(Clone, Debug)]
struct Keypad<'a> {
    row: usize,
    col: usize,
    keypad: &'a [&'a [char]],
}

impl<'a> Keypad<'a> {
    fn left(&mut self) {
        let new = self.col.saturating_sub(1);
        if self.keypad[self.row][new] != 'x' {
            self.col = new;
        }
    }

    fn right(&mut self) {
        let new = cmp::min(self.col + 1, self.keypad[self.row].len() - 1);
        if self.keypad[self.row][new] != 'x' {
            self.col = new;
        }
    }

    fn up(&mut self) {
        let new = self.row.saturating_sub(1);
        if self.keypad[new][self.col] != 'x' {
            self.row = new;
        }
    }

    fn down(&mut self) {
        let new = cmp::min(self.row + 1, self.keypad.len() - 1);
        if self.keypad[new][self.col] != 'x' {
            self.row = new;
        }
    }
}

const KEYPAD_1: &[&[char]] = &[&['1', '2', '3'], &['4', '5', '6'], &['7', '8', '9']];
pub fn part1(s: &str) -> String {
    let mut input = String::new();
    let mut keypad = Keypad {
        keypad: KEYPAD_1,
        row: 1,
        col: 1,
    };
    for line in s.lines() {
        for b in line.bytes() {
            match b {
                b'R' => keypad.right(),
                b'L' => keypad.left(),
                b'U' => keypad.up(),
                b'D' => keypad.down(),
                b => panic!("unexpected ch: {}", b as char),
            }
        }
        input.push(keypad.keypad[keypad.row][keypad.col]);
    }
    input
}

const KEYPAD_2: &[&[char]] = &[
    &['x', 'x', '1', 'x', 'x'],
    &['x', '2', '3', '4', 'x'],
    &['5', '6', '7', '8', '9'],
    &['x', 'A', 'B', 'C', 'x'],
    &['x', 'x', 'D', 'x', 'x'],
];
pub fn part2(s: &str) -> String {
    let mut input = String::new();
    let mut keypad = Keypad {
        keypad: KEYPAD_2,
        row: 2,
        col: 0,
    };
    for line in s.lines() {
        for b in line.bytes() {
            match b {
                b'R' => keypad.right(),
                b'L' => keypad.left(),
                b'U' => keypad.up(),
                b'D' => keypad.down(),
                b => panic!("unexpected ch: {}", b as char),
            }
        }
        input.push(keypad.keypad[keypad.row][keypad.col]);
    }
    input
}

#[test]
fn part1_actual() {
    assert_eq!(part1(INPUT), "74921");
}

#[test]
fn part2_actual() {
    assert_eq!(part2(INPUT), "A6B35");
}

pub const INPUT: &str = "RUDULRLLUULRURDDRRUDURULLLDRLRLUDDLUDUDDUDRRDUDULDUUULLRULLRLDDLDLDDRLRRRRUDLLDDUULDRLLUDDRRUURLULRRRDLLURRUUDURUDDURLUDDDLUDDUUDUURUDLRDRDRLRDRLDRUDRUUDLRDDRRURDDLRDDRRURDUDDLULLUDRURURRRLRRUDUULULULRRLDLUDUURRLLRUDLLDRDDLRRRULRUDLULDDLLLULDLRUDLLLLRDDLRDRLDRLLRDRRDLRDULULRLLLDRUDRRRUULRUULDRURLUDRURRDLLDLRDLDDDDRRLUDLRRLUUUURDRDDLRRURURRDUULLRLURLURUDDDRDURDUUDRLRLRRLDDLDLDLDDDUDDULURLDDLLRLRRDULUDDLULRLUDDLDLRULUUUDRLDRUDURLUDDRLLRUULDLRRRRDLLLLURULLRDRRUDLUULRRDLLRLRLUDLDDULLDLLRDLDLL
LLUUUUUUDUDRLRDRDLDURRRLLRRLRURLLUURRLLUDUDLULUURUUURDLUDLDDLULLRDLRUULDLRDUDURLLDDUDUDULLUDDUULLLUULRRRLULRURRDLRUDUDDURRRDRUURDURLLULLRULLDRUULLURLDRDUUDDDDDDRRLDRLRRRLULDDUURRLLLLDRURLURDRDRDURUDUURRDUDUDRLLUUDDRLUDDDRDLDLRLDRURRDLLRULDRLLURURRLUULLRLRRURDDRDRUUURUURUUUDLLRRLUDRLDLRLURLDLUDDUDDDLDUDRRLDLRURULRLLRDUULURRRULDLLLRLDDDUURRRRDULLRURRLULULDLRRUDUDDLRUURDLDUDDUDRRDLRRRDUDUUUDLLDDDDLURLURRRUUULLLULRRLLLLLLULDUUDLRUDRRDLRDUUDUDLLRLDLLRUURDUUURUUUDDLLUUDLULDURLULULUUUDRUDULLURRULRULLRDLDDU
RLUUURULLDLRLDUDRDURRDUURLLUDDDUULRRRLRLURDDRUULUDULDUUDDDDUDDDDRUDDLDUUDRUDLRRRLLRDDLLLRLLRUULRUULDDRURRLURRLRLULDDRRRDDURDDRDRDULRUDRUUDULRLLULDLRLLDRULRDDRRDDUDLRLLUDRDRRRLUDULRDLRDDURRUUDDRRUDURRUUUDDRRDUDURLUUDUDUURDDDLURLULLUULULURUDUUDRUDULLUUULURDLDUULLDDLLDULRLRLRDUUURUUDLRLDURUDRLDULLUDLDLLRDUURRDUDURLUUUDLLRRULRLULRLDLLURDURRULRLLRRDUDLLRDRRRRDLUUDRUUUDDLRLUDDDDDDRURRRUUURRDLLRURLDDLLDLRRLLLDRRULRRUDLDRDDRRLULURLLUURURURRRRUUUUURUDURLRLLLULULDLLDLRDRRULUDUDRDRRDRDRRDUDLLLRUDRUDDDULRULRRRDRLRUUUURUDURDUUULLULRUDDULDUUDLDURRD
ULRULDDLDLULLLRRRLRUDDDDDLLDDUDLRRDULUUDRDLRRURDRRLUULRURUDRRULDLLLUDRUUDULULUDDRUDDDRDURRRDRDUUURLRDULUDRDRLDRUDDLLLDRRULUDLUDLDLLRRUDUULULDLDLLUURDLDDLLUUDURLURLLLDRDLDRRLRULUURRDRULRUUURULRRUDDDDLLDLDDLLRRLRRRRDUUDUDLDRDRRURDLRURULDLRDLLLLRUDRLLRDLRLRDURDRUDURRRLRDRDLLRLUDDDDRLRLLDUURRURLUURUULUDLUURDRRUDDLUDUDDDURRDRUDRLRULDULUUUUUUDDUDRUDUUURUDRRDLUDLUUDUULUDURDLDDDLLURRURUUDUDDRRDRLLULULDRLRURRDDDRDUUURDDDRULUDRDDLDURRLDDDLRRRLDDRDURULDLUDLLLURLURRLRRULDLLDDUDRRULDRRRRLURRUULRRRUDLURDLLDLLDULUUDRRLDLLLDRLRUDLUULDLDRUDUDURDRUDRDDDLRLULLUR
LRLUUURRLRRRRRUURRLLULRLULLDLUDLUDRDDRLDLRLULLURDURLURDLLRLDUUDDURRRRLDLLRULLRLDLLUUDRLDDLLDRULDRLLRURDLRURRUDLULLRURDLURRURUDULLDRLLUUULUDRURRUUDUDULUUULRLDDULDRDLUDDUDDDLRURULLDLLLRLLUURDLRUDLLLLDLLRLRUUUDDRUUUUDLDLRDDURLDURUULLLUUDLLLLDULRRRLLDLDRRDRLUDRUDURLLUDLRLLUDUDRDDDRDLRDLRULUULDRLUDLRLDUURLRRLUDDDUUDDDUDRLDLDUDLURUULLDDDURUUULRLUDLDURUUDRDRURUDDUURDUUUDLLDLDLDURUURLLLLRURUURURULRULLRUDLRRUUUUUDRRLLRDDUURDRDRDDDUDRLURDRRRUDLLLDURDLUUDLLUDDULUUDLDUUULLDRDLRURUURRDURRDLURRRRLLUUULRDULDDLDUURRDLDLLULRRLLUDLDUDLUUL";
